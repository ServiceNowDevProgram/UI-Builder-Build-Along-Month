<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Group issue">cdad87a2c34556502f84fc84e4013159</macroponent>
        <name>Handle events of group type field</name>
        <preset/>
        <required_translations>[]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {
    var {
        name,
        payload
    } = event;

    if (event.elementId == 'group_type') {
        if (name === 'NOW_SELECT#SELECTED_ITEM_SET') {
            
            // If group type field changed from dropdown
            if (payload.value) {

                var selectedItem = payload.value;
                var managementMethodFieldObj = api.state.managementMethodField;
                var descriptionFieldObj = api.state.descriptionField;
                var groupTypeFieldObj = api.state.groupTypeField;
                var parentIssueFieldObj = api.state.parentIssueField;
                var issueFiltersObj = api.state.issueFilters;
                var issueColumnsObj = api.state.issueColumns;
                var newParentIssueNameField = api.state.newParentIssueNameField;

                groupTypeFieldObj.selectedItem = selectedItem;
                // reset fields value
                newParentIssueNameField = '';
                parentIssueFieldObj.issueName = '';
                parentIssueFieldObj.issueId = '-1';
                managementMethodFieldObj.selectedItem = '';
                descriptionFieldObj.data = '';
                // if the group type is not 'create a new group ' then the fields will be read-only
                if (selectedItem != 'create_new_group') {

                    if (selectedItem == 'add_to_existing_group') {
                        // When 'Add to existing group' is selected then change the columns to be rendered.
                        issueColumnsObj.parentIssueModalColumns = issueColumnsObj.parentIssueColumns;
                        issueFiltersObj.parentIssueModalFilter = issueFiltersObj.parentIssueFilter;
                        issueFiltersObj.parentIssueSearchFilter = issueFiltersObj.parentIssueFilter;
                        // Set the management method read only in case of existing parent
                        managementMethodFieldObj.readOnly = true;

                    } else {
                        // When 'make existing standalone issue a group' option is selected then change the columns which will be rendered
                        issueColumnsObj.parentIssueModalColumns = issueColumnsObj.standaloneIssueColumns;
                        issueFiltersObj.parentIssueModalFilter = issueFiltersObj.standaloneIssueFilter;
                        issueFiltersObj.parentIssueSearchFilter = issueFiltersObj.standaloneIssueFilter;
                        //set the management method to be edited in case of making standalone issue a group
                        managementMethodFieldObj.readOnly = false;
                    }
                    // setting the filter for the typeahead
                    descriptionFieldObj.readOnly = true;


                } else {

                    // making fields editable when create new group is selected
                    descriptionFieldObj.readOnly = false;
                    managementMethodFieldObj.readOnly = false;
                }
                
                api.setState('issueColumns', issueColumnsObj);
                api.setState('issueFilters', issueFiltersObj);
                api.setState('newParentIssueNameField', newParentIssueNameField);
                api.setState('parentIssueField', parentIssueFieldObj);
                api.setState('groupTypeField', groupTypeFieldObj);
                api.setState('managementMethodField', managementMethodFieldObj);
                api.setState('descriptionField', descriptionFieldObj);
                api.data.look_up_records.refresh();
                api.data.get_row_count_of_table.refresh();
                api.data.look_up_record.refresh();
            }


        }
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2024-10-08 03:04:54</sys_created_on>
        <sys_id>41ad87a2c34556502f84fc84e40131ac</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Handle events of group type field</sys_name>
        <sys_package display_value="BAM - You &amp; I Builder Live! Conference Notes" source="x_snc_bam_you_i_0">69fa6ee3838742107d786970ceaad318</sys_package>
        <sys_policy/>
        <sys_scope display_value="BAM - You &amp; I Builder Live! Conference Notes">69fa6ee3838742107d786970ceaad318</sys_scope>
        <sys_update_name>sys_ux_client_script_41ad87a2c34556502f84fc84e40131ac</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2024-10-08 03:04:54</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
